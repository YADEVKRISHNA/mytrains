<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="subscriptions-suite.xml" />
	<munit:test name="getSubscriptionBySubscriptionId-test" doc:id="5b53a684-dbab-4199-a999-b6f516892ba0" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="5277a89a-3701-4ee4-9a81-243e432c88f6" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="59105354-7644-47a8-aa74-c2b5bf20b39c" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getSubscriptionBySubscriptionIdtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getSubscriptionBySubscriptionIdtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="694a28c3-9123-40f1-9f2a-688c8f18bdb2" >
				<munit:payload value="#[readUrl('classpath://getSubscriptionBySubscriptionIdtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getSubscriptionBySubscriptionIdtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getSubscriptionBySubscriptionIdtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getSubscriptionBySubscriptionId" doc:id="6cb9b44e-24ee-491b-9c69-065e464fdd18" name="get-subscription-by-subscription-id"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="4b09976a-b6d0-42bc-8a2a-172d04b3bd70" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getSubscriptionBySubscriptionIdtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="addSubscriptionByUserId-test" doc:id="6dc2a81d-40f4-4633-8775-1b44bdf86d95" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Insert subscription in to database if source and destination are differen" doc:id="122a9e33-ce84-4680-9fd2-3e21b29359bc" processor="db:insert">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="e6a41bcb-393b-4af3-ae88-1f282d9492ff" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://addSubscriptionByUserIdtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://addSubscriptionByUserIdtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="e83a37fb-c34c-4039-a468-2f1771093033" >
				<munit:payload value="#[output application/json --- readUrl('classpath://addSubscriptionByUserIdtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://addSubscriptionByUserIdtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://addSubscriptionByUserIdtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to addSubscriptionByUserId" doc:id="efceb973-3cc1-4995-b5c6-a18b8e0b02c6" name="add-subscription-by-user-id"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ea077309-bb5d-4fb2-894d-f13938b6bd2d" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import addSubscriptionByUserIdtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="getSubscriptionsByUserId-test" doc:id="0212824c-cf74-4f90-a3b1-eb1b03a36ddc" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="6e5b3391-7953-4157-8a7c-10ab1a1c8958" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d9ca828a-819d-4ccc-be5c-792e0057887b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getSubscriptionsByUserIdtest\mock_payload1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getSubscriptionsByUserIdtest\mock_variable_1.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="b294f180-61fb-490f-a51b-8d6bda94633d" >
				<munit:payload value="#[readUrl('classpath://getSubscriptionsByUserIdtest\set-event_payload1.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getSubscriptionsByUserIdtest\set-event_attributes1.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getSubscriptionsByUserIdtest\set-event_variable_1.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getSubscriptionsByUserId" doc:id="1c3860fa-c044-4323-8735-d41262cbda9e" name="get-subscriptions-by-user-id"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b48ebfb3-1763-4d20-b039-593d968bb08a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getSubscriptionsByUserIdtest::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="getQualifyingLocations-test" doc:id="19aaa6a8-a1b4-4549-b3ef-d7bda32ad19e" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="fa1b4529-0001-4979-87d5-3532397690df" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="eb99c826-0977-44cf-b45e-e8cbc72dfe0b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getQualifyingLocationstest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getQualifyingLocationstest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="a9fa7793-0e36-4cf0-95bb-35ed25ad8768" >
				<munit:payload value="#[readUrl('classpath://getQualifyingLocationstest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getQualifyingLocationstest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getQualifyingLocationstest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getQualifyingLocations" doc:id="0d18aad9-3f86-4012-8cc2-4e35b23a91b6" name="get-qualifying-locations"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="9e2d0870-a9f1-4453-aeb1-58eb0abe0799" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getQualifyingLocationstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
